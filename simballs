<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simulador de Moagem Avançado</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
            color: #333;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            background-color: #2c3e50;
            color: white;
            padding: 20px 0;
            text-align: center;
            border-radius: 0 0 10px 10px;
        }
        
        .simulator-container {
            display: flex;
            gap: 20px;
            margin-top: 30px;
        }
        
        .controls-panel {
            flex: 1;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .visualization-panel {
            flex: 2;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            position: relative;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
        }
        
        input, select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        
        button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            width: 100%;
            transition: background-color 0.3s;
        }
        
        button:hover {
            background-color: #2980b9;
        }
        
        .mill-diagram {
            width: 100%;
            height: 300px;
            position: relative;
            margin: 30px 0;
            background-color: #f9f9f9;
            border-radius: 8px;
            overflow: hidden;
        }
        
        .mill {
            position: absolute;
            width: 200px;
            height: 200px;
            background-color: #95a5a6;
            border-radius: 50%;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-weight: bold;
            box-shadow: inset 0 0 20px rgba(0,0,0,0.3);
        }
        
        .input-pipe, .output-pipe {
            position: absolute;
            background-color: #e74c3c;
            height: 30px;
        }
        
        .input-pipe {
            width: 120px;
            top: 30%;
            left: -100px;
            transform: rotate(15deg);
        }
        
        .output-pipe {
            width: 150px;
            bottom: 25%;
            right: -130px;
            transform: rotate(-10deg);
        }
        
        .particles {
            position: absolute;
            width: 10px;
            height: 10px;
            background-color: #f1c40f;
            border-radius: 50%;
            opacity: 0;
        }
        
        .results {
            margin-top: 30px;
        }
        
        .chart-container {
            width: 100%;
            height: 250px;
            margin-top: 20px;
        }
        
        .hidden {
            display: none;
        }
        
        .auth-container {
            max-width: 400px;
            margin: 50px auto;
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .error-message {
            color: #e74c3c;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div id="app">
        <!-- Área de Autenticação -->
        <div id="auth-area">
            <div class="auth-container" id="login-container">
                <h2>Login</h2>
                <form id="login-form">
                    <div class="form-group">
                        <label for="email">Email:</label>
                        <input type="email" id="email" required>
                    </div>
                    <div class="form-group">
                        <label for="password">Senha:</label>
                        <input type="password" id="password" required>
                    </div>
                    <button type="submit">Entrar</button>
                    <p id="login-error" class="error-message"></p>
                    <p>Não tem conta? <a href="#" id="show-register">Registre-se</a></p>
                </form>
            </div>
            
            <div class="auth-container hidden" id="register-container">
                <h2>Registro</h2>
                <form id="register-form">
                    <div class="form-group">
                        <label for="reg-username">Nome:</label>
                        <input type="text" id="reg-username" required>
                    </div>
                    <div class="form-group">
                        <label for="reg-email">Email:</label>
                        <input type="email" id="reg-email" required>
                    </div>
                    <div class="form-group">
                        <label for="reg-password">Senha:</label>
                        <input type="password" id="reg-password" required>
                    </div>
                    <button type="submit">Registrar</button>
                    <p id="register-error" class="error-message"></p>
                    <p>Já tem conta? <a href="#" id="show-login">Faça login</a></p>
                </form>
            </div>
        </div>
        
        <!-- Área do Simulador (inicialmente oculta) -->
        <div id="simulator-area" class="hidden">
            <header>
                <h1>Simulador Avançado de Moagem Mineral</h1>
            </header>
            
            <div class="container">
                <div class="simulator-container">
                    <div class="controls-panel">
                        <h2>Parâmetros de Moagem</h2>
                        
                        <div class="form-group">
                            <label for="material">Material:</label>
                            <select id="material">
                                <option value="iron">Minério de Ferro</option>
                                <option value="bauxite">Bauxita</option>
                                <option value="copper">Minério de Cobre</option>
                                <option value="gold">Minério de Ouro</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="feed-rate">Taxa de Alimentação (ton/h):</label>
                            <input type="number" id="feed-rate" min="1" max="500" value="100">
                        </div>
                        
                        <div class="form-group">
                            <label for="feed-size">Tamanho da Alimentação (mm):</label>
                            <input type="number" id="feed-size" min="0.1" step="0.1" value="25.0">
                        </div>
                        
                        <div class="form-group">
                            <label for="product-size">Tamanho do Produto (mm):</label>
                            <input type="number" id="product-size" min="0.001" step="0.001" value="0.075">
                        </div>
                        
                        <div class="form-group">
                            <label for="mill-type">Tipo de Moinho:</label>
                            <select id="mill-type">
                                <option value="ball">Moinho de Bolas</option>
                                <option value="rod">Moinho de Barras</option>
                                <option value="sag">Moinho SAG</option>
                                <option value="vertical">Moinho Vertical</option>
                            </select>
                        </div>
                        
                        <button id="run-simulation">Executar Simulação</button>
                    </div>
                    
                    <div class="visualization-panel">
                        <h2>Visualização do Processo</h2>
                        
                        <div class="mill-diagram">
                            <div class="input-pipe"></div>
                            <div class="mill">MOINHO</div>
                            <div class="output-pipe"></div>
                            
                            <!-- Partículas animadas serão adicionadas dinamicamente -->
                        </div>
                        
                        <div class="chart-container">
                            <canvas id="simulation-chart"></canvas>
                        </div>
                        
                        <div class="results hidden" id="results">
                            <h3>Resultados da Simulação</h3>
                            <div id="result-data"></div>
                        </div>
                    </div>
                </div>
                
                <button id="logout-btn" style="margin-top: 30px; background-color: #e74c3c;">Sair do Sistema</button>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Banco de dados de usuários (simulado)
        let users = JSON.parse(localStorage.getItem('moagem_users')) || [];
        let currentUser = null;
        let simulationChart = null;
        
        // Elementos da interface
        const authArea = document.getElementById('auth-area');
        const simulatorArea = document.getElementById('simulator-area');
        const loginContainer = document.getElementById('login-container');
        const registerContainer = document.getElementById('register-container');
        const showRegister = document.getElementById('show-register');
        const showLogin = document.getElementById('show-login');
        const loginForm = document.getElementById('login-form');
        const registerForm = document.getElementById('register-form');
        const runSimulationBtn = document.getElementById('run-simulation');
        const logoutBtn = document.getElementById('logout-btn');
        const resultsDiv = document.getElementById('results');
        const resultData = document.getElementById('result-data');
        const millDiagram = document.querySelector('.mill-diagram');
        
        // Alternar entre login e registro
        showRegister.addEventListener('click', (e) => {
            e.preventDefault();
            loginContainer.classList.add('hidden');
            registerContainer.classList.remove('hidden');
        });
        
        showLogin.addEventListener('click', (e) => {
            e.preventDefault();
            registerContainer.classList.add('hidden');
            loginContainer.classList.remove('hidden');
        });
        
        // Login
        loginForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            
            const user = users.find(u => u.email === email && u.password === password);
            
            if (user) {
                currentUser = user;
                authArea.classList.add('hidden');
                simulatorArea.classList.remove('hidden');
                document.getElementById('login-error').textContent = '';
                initializeChart();
            } else {
                document.getElementById('login-error').textContent = 'Email ou senha incorretos';
            }
        });
        
        // Registro
        registerForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const username = document.getElementById('reg-username').value;
            const email = document.getElementById('reg-email').value;
            const password = document.getElementById('reg-password').value;
            
            if (users.some(u => u.email === email)) {
                document.getElementById('register-error').textContent = 'Email já cadastrado';
                return;
            }
            
            const newUser = { username, email, password };
            users.push(newUser);
            localStorage.setItem('moagem_users', JSON.stringify(users));
            
            currentUser = newUser;
            authArea.classList.add('hidden');
            simulatorArea.classList.remove('hidden');
            document.getElementById('register-error').textContent = '';
            initializeChart();
        });
        
        // Logout
        logoutBtn.addEventListener('click', () => {
            currentUser = null;
            simulatorArea.classList.add('hidden');
            authArea.classList.remove('hidden');
            loginContainer.classList.remove('hidden');
            registerContainer.classList.add('hidden');
            resultsDiv.classList.add('hidden');
            
            // Limpar formulários
            document.getElementById('email').value = '';
            document.getElementById('password').value = '';
            document.getElementById('reg-username').value = '';
            document.getElementById('reg-email').value = '';
            document.getElementById('reg-password').value = '';
        });
        
        // Inicializar gráfico
        function initializeChart() {
            const ctx = document.getElementById('simulation-chart').getContext('2d');
            
            if (simulationChart) {
                simulationChart.destroy();
            }
            
            simulationChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Distribuição Granulométrica',
                        data: [],
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1,
                        fill: false
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: '% Passante'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Tamanho (mm)'
                            }
                        }
                    }
                }
            });
        }
        
        // Animação das partículas
        function animateParticles() {
            // Limpar partículas existentes
            document.querySelectorAll('.particles').forEach(p => p.remove());
            
            // Criar partículas de alimentação (grandes)
            for (let i = 0; i < 10; i++) {
                createParticle(-90, 80, 10, '#e74c3c', 1.5);
            }
            
            // Criar partículas de produto (pequenas)
            setTimeout(() => {
                for (let i = 0; i < 20; i++) {
                    createParticle(200, 150, 5, '#f1c40f', 0.7);
                }
            }, 1000);
        }
        
        function createParticle(startX, startY, size, color, duration) {
            const particle = document.createElement('div');
            particle.className = 'particles';
            particle.style.width = `${size}px`;
            particle.style.height = `${size}px`;
            particle.style.backgroundColor = color;
            
            // Posição inicial aleatória
            const x = startX + (Math.random() * 40 - 20);
            const y = startY + (Math.random() * 40 - 20);
            
            particle.style.left = `${x}px`;
            particle.style.top = `${y}px`;
            millDiagram.appendChild(particle);
            
            // Animação
            setTimeout(() => {
                particle.style.opacity = '1';
                particle.style.transition = `all ${duration}s linear`;
                
                // Mover partícula
                if (startX < 0) { // Partícula de entrada
                    particle.style.left = '100px';
                    particle.style.top = '100px';
                } else { // Partícula de saída
                    particle.style.left = '250px';
                    particle.style.top = '180px';
                }
            }, 10);
            
            // Remover após animação
            setTimeout(() => {
                particle.remove();
            }, duration * 1000 + 100);
        }
        
        // Executar simulação
        runSimulationBtn.addEventListener('click', () => {
            // Obter parâmetros
            const material = document.getElementById('material').value;
            const feedRate = parseFloat(document.getElementById('feed-rate').value);
            const feedSize = parseFloat(document.getElementById('feed-size').value);
            const productSize = parseFloat(document.getElementById('product-size').value);
            const millType = document.getElementById('mill-type').value;
            
            // Mostrar animação
            animateParticles();
            
            // Simular processamento (cálculos fictícios)
            setTimeout(() => {
                // Resultados simulados
                const energyConsumption = (feedRate * feedSize / productSize * (millType === 'ball' ? 1.2 : millType === 'rod' ? 1.5 : 1.8)).toFixed(2);
                const processingTime = (feedSize / productSize * 0.5).toFixed(2);
                const efficiency = (90 - (feedSize / productSize * 0.8)).toFixed(2);
                
                // Atualizar gráfico
                updateChart(feedSize, productSize);
                
                // Mostrar resultados
                resultData.innerHTML = `
                    <p><strong>Consumo Energético:</strong> ${energyConsumption} kWh/t</p>
                    <p><strong>Tempo de Processamento:</strong> ${processingTime} minutos</p>
                    <p><strong>Eficiência de Moagem:</strong> ${efficiency}%</p>
                    <p><strong>Produção Estimada:</strong> ${(feedRate * 0.95).toFixed(2)} ton/h</p>
                `;
                
                resultsDiv.classList.remove('hidden');
            }, 2000);
        });
        
        // Atualizar gráfico com dados simulados
        function updateChart(feedSize, productSize) {
            // Gerar dados fictícios para curva de distribuição granulométrica
            const sizes = [];
            const passing = [];
            
            for (let i = feedSize; i >= productSize; i -= feedSize/10) {
                sizes.push(i.toFixed(2));
                // Fórmula simplificada para curva de distribuição
                const p = 100 * Math.pow((1 - (i - productSize)/(feedSize - productSize)), 0.6);
                passing.push(p.toFixed(2));
            }
            
            simulationChart.data.labels = sizes;
            simulationChart.data.datasets[0].data = passing;
            simulationChart.update();
        }
        
        // Verificar se já está logado ao carregar
        document.addEventListener('DOMContentLoaded', () => {
            const savedUser = localStorage.getItem('currentUser');
            if (savedUser) {
                currentUser = JSON.parse(savedUser);
                authArea.classList.add('hidden');
                simulatorArea.classList.remove('hidden');
                initializeChart();
            }
        });
    </script>
</body>
</html>
